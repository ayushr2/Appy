<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd">

	<!--
	Defines a properties file for dereferencing variables
	-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="location" value="/WEB-INF/red5-web.properties" />
	</bean>

	<!-- Database Management Components -->
	
	<bean id="dbConnection" class="com.red5pro.services.streammanager.database.jdbc.sql.SQLTest" init-method="initialize">
        <property name="url" value="jdbc:mysql://${config.dbHost}:${config.dbPort}/cluster" />
   		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
   		<property name="dbName" value="cluster" />
   		<property name="username" value="${config.dbUser}" />
   		<property name="password" value="${config.dbPass}" />
   		<property name="initialSize" value="0" />
   		<property name="maxActive" value="30" />
   		<property name="maxIdle" value="5" />
    </bean>

    <bean id="dbManager" class="com.red5pro.services.streammanager.database.jdbc.DataManager" init-method="getInstance">
       <property name="sql" ref="dbConnection"/>
    </bean>

	<!-- Stream Manager Store -->

	<bean id="streamStore" class="com.red5pro.services.streammanager.components.store.StreamManagerRDSStore" init-method="initialize" depends-on="dbManager">
    </bean>

	<!-- Policy Management Components -->

	<bean id="policyOperator" class="com.red5pro.services.streammanager.autoscaling.components.filesystem.FileSystemScalePolicyOperator" init-method="initialize">
		<property name="folderName" value="${scalepolicy.store}"/>
	</bean>

	<bean id="policyController" class="com.red5pro.services.streammanager.autoscaling.components.Red5ScalePolicyController" init-method="initialize">
		<property name="policyOperator" ref="policyOperator"/>
	</bean>

	<bean id="policyManager" class="com.red5pro.services.streammanager.autoscaling.components.Red5ScalePolicyManager" init-method="initialize">
		<property name="policyController" ref="policyController"/>
		<property name="autoScanMinutesDelay" value="${scalepolicy.filescandelay}"/> <!-- set zero to disable -->
	</bean>
		
	<!-- Launch configuration Management Components -->

	<bean id="launchConfigOperator" class="com.red5pro.services.streammanager.nodes.component.configuration.filesystem.LaunchConfigurationOperator" init-method="initialize">
		<property name="folderName" value="${launchconfig.store}"/>
	</bean>

	<bean id="launchConfigController" class="com.red5pro.services.streammanager.nodes.component.Red5LaunchConfigurationController" init-method="initialize">
		<property name="configurationOperator" ref="launchConfigOperator"/>
	</bean>

	<bean id="launchConfigManager" class="com.red5pro.services.streammanager.nodes.component.Red5LaunchConfigurationManager" init-method="initialize">
		<property name="configController" ref="launchConfigController"/>
		<property name="autoScanMinutesDelay" value="${launchconfig.filescandelay}"/> <!-- set zero to disable -->
	</bean>
	
	<!-- Instance Management Components -->

	<!-- GOOGLE COMPUTE CONTROLLER -->
	<!--
	<bean id="apiBridge" class="com.red5pro.services.cloud.google.component.ComputeInstanceController" init-method="initialize">
       <property name="project" value="${compute.project}"/>
       <property name="defaultZone" value="${compute.defaultzone}"/>
       <property name="defaultDiskType" value="${compute.defaultdisk}"/>
       <property name="operationTimeoutMilliseconds" value="${compute.operationTimeoutMilliseconds}"/>
    </bean>
    -->
     
    <!-- AWS CONTROLLER -->
    <!--
    <bean id="apiBridge" class="com.red5pro.services.cloud.aws.component.AWSInstanceController" init-method="initialize">
       <property name="accessKey" value="${aws.accessKey}"/>
       <property name="accessSecret" value="${aws.accessSecret}"/>
       <property name="ec2KeyPairName" value="${aws.ec2KeyPairName}"/>
       <property name="ec2SecurityGroup" value="${aws.ec2SecurityGroup}"/>
       <property name="defaultZone" value="${aws.defaultzone}"/>
	   <property name="defaultVPC" value="${aws.defaultVPC}"/>
       <property name="operationTimeoutMilliseconds" value="${aws.operationTimeoutMilliseconds}"/>
       <property name="faultZoneBlockMilliseconds" value="${aws.faultZoneBlockMilliseconds}"/>
    </bean>
    -->
    
    <!-- Default CONTROLLER -->
    <bean id="apiBridge" class="com.red5pro.services.streammanager.cloud.sample.component.DummyCloudController" init-method="initialize">
    
    </bean>
    
    <!--  origin score evaluation metrics and components start -->
	
	<bean id="freeConnectionSlotsMetric" class="com.red5pro.services.streammanager.nodes.metrics.MetricRule">
		<property name="metricName"><value>clientCount</value></property>
		<property name="unit"><value>PERCENTAGE</value></property>
		<property name="minValue"><value>0</value></property>
		<property name="maxValue">	<value>100</value></property>
		<property name="direction"><value>LOWERBETTER</value></property>
		<property name="metricWeight"><value>${instanceevaluator.streams.metricweight}</value></property>
	</bean>

	<bean id="streamCountMetric" class="com.red5pro.services.streammanager.nodes.metrics.MetricRule">
		<property name="metricName"><value>publisherCount</value></property>
		<property name="unit"><value>PERCENTAGE</value></property>
		<property name="minValue"><value>0</value></property>
		<property name="maxValue">	<value>100</value></property>
		<property name="direction"><value>LOWERBETTER</value></property>
		<property name="metricWeight"><value>${instanceevaluator.streams.metricweight}</value></property>
	</bean>
	
	<bean id="subscriberCountMetric" class="com.red5pro.services.streammanager.nodes.metrics.MetricRule">
		<property name="metricName"><value>edgeSubscriberCount</value></property>
		<property name="unit"><value>PERCENTAGE</value></property>
		<property name="minValue"><value>0</value></property>
		<property name="maxValue">	<value>100</value></property>
		<property name="direction"><value>LOWERBETTER</value></property>
		<property name="metricWeight"><value>${instanceevaluator.subscribers.metricweight}</value></property>
	</bean>
	
	<bean id="serverMetricsEvaluator" class="com.red5pro.services.streammanager.nodes.component.InstanceMetricsRuleManager">
		<property name="originMetricRules">
			<list value-type="com.red5pro.services.streammanager.nodes.metrics.MetricRule">
				<ref bean="freeConnectionSlotsMetric"></ref>  <!-- dynamically injected metrics -->
				<ref bean="streamCountMetric"></ref>  <!-- dynamically injected metrics -->
				<ref bean="subscriberCountMetric"></ref>  <!-- dynamically injected metrics -->
			</list>
		</property>
	</bean>

	<!--  origin score evaluation metrics and components end -->
	
	<bean id="clusterApiConfig" class=" com.red5pro.services.streammanager.nodes.model.ClusterConfiguration">
		<property name="clusterPassword" value="${cluster.password}"/>
		<property name="rtmpPort" value="${cluster.publicPort}"/>
		<property name="httpPort" value="${cluster.accessPort}"/>
		<property name="retryDuration" value="${cluster.retryDuration}"/>
		<property name="reportingSpeed" value="${cluster.reportingSpeed}"/>
	</bean>
     
    <!-- Red5 Instance Manager Components -->
    
	<bean id="instanceManager" class="com.red5pro.services.streammanager.nodes.component.Red5InstanceController">
		<property name="cloudApiController" ref="apiBridge"/>
		<property name="serverMetricsEvaluator" ref="serverMetricsEvaluator"/>
		<property name="nodePingTimeThreshold" value="#{${cluster.reportingSpeed} * 2}"/>
		<property name="maxNoPingExcuseTime" value="#{${cluster.reportingSpeed} * 6}"/>
		<property name="newNodePingTimeThreshold" value="${instancecontroller.newNodePingTimeThreshold}"/>
		<property name="replaceDeadClusters" value="${instancecontroller.replaceDeadClusters}"/>
		<property name="deleteDeadGroupNodesOnCleanUp" value="${instancecontroller.deleteDeadGroupNodesOnCleanUp}"/>
		<property name="deadNodesCheckUpInterval" value="#{${cluster.reportingSpeed} * 1.5}"/>
		<property name="instanceNamePrefix" value="${instancecontroller.instanceNamePrefix}"/>
		<property name="nodeGroupStateToleranceTime" value="${instancecontroller.nodeGroupStateToleranceTime}"/>
		<property name="nodeStateToleranceTime" value="${instancecontroller.nodeStateToleranceTime}"/>
		<property name="cloudCleanupInterval" value="${instancecontroller.cloudCleanupInterval}"/>
		<property name="blackListCleanUpTime" value="${instancecontroller.blackListCleanUpTime}"/>
		<property name="clusterConfiguration" ref="clusterApiConfig"/>
	</bean>

	<!-- Autoscaler Components -->

<bean id="autoScaler" class="com.red5pro.services.streammanager.autoscaling.components.Red5AutoScaleManager" >
		<property name="clusterInductionToleranceTime" value="#{${cluster.reportingSpeed} * 3}"/>
</bean>
	
	<bean id="facade" class="com.red5pro.services.streammanager.StreamManagerFacade" init-method="initialize" depends-on="instanceManager, streamStore, policyManager, launchConfigManager">
		<property name="store" ref="streamStore"/>
		<property name="instanceManager" ref="instanceManager"/>
		<property name="autoScaler" ref="autoScaler"/>
		<property name="configManager" ref="launchConfigManager"/>
		<property name="policyManager" ref="policyManager"/>
		<property name="managerIp" value="${streammanager.ip}"/>
	</bean>

	<!-- Simple REST security configuration for administrator -->
	<import resource="security-config.xml" />

</beans>
